//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: JE Pib
//   Authors: Jhrino
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "pib_types.bt"

LittleEndian();

struct Header
{
    char magic[4]<name = "Identifier">;
    byte unk1<hidden = true>;
    byte endian<name = "Endian">;
    byte unk2[2]<hidden = true>;
    int version<name = "PIB Version">;
    int padding<hidden = true>;
}hdr<name = "File Information", bgcolor = cRed>;

struct PibHeader
{
    int pibID<name = "PIB ID">;
    int emitterCount<name = "Emitter Count">;
    int pibLength<name = "PIB Duration (In Ticks)">;
    int durationOffset<name="Duration Offset">;
    float speed<name = "Speed">;
    float forwardOffset<name = "Forward Offset">;
    float maxIntensity<name = "Max Intensity">;
    float radius<name = "Radius">;
    float range<name = "Range">;
    float evCorrect<name = "EV Correct">;
    
    struct ColAnim
    {
        float colAnimR[32]<name = "Color R Animation">;
        float colAnimG[32]<name = "Color G Animation">;
        float colAnimB[32]<name = "Color B Animation">;
        float colAnimI[32]<name = "Intensity Animation">;
    }colAnim<name = "Color Animation">;

    float colorTime<name = "Color Time">;
    float intensityTime<name = "Intensity Time">;
    uint flags<name = "Flags">;
    uint soundCuesheet<name = "Sound ID">;
    byte padding[8]<hidden = true>;
    matrix4x4 baseMtx<name = "Base Matrix">;
    vec3f scale<name = "Scale">;

    struct Fade
    {
        float farFadeDist<name = "Far Fade Distance">;
        float farFadeOffs<name = "Far Fade Offset">;
        float nearFadeDist<name = "Near Fade Distance">;
        float nearFadeOffs<name = "Near Fade Offset">;
        float nearFadeDistAll<name = "Near Fade Distance All">;
        float nearFadeOffsAll<name = "Near Fade Offset All">;
    }fade<name = "Fade">;

    byte padding2[12]<hidden = true>;

    local int i = 0;


    //temporarily exec once
    for(i = 0; i < emitterCount; i++)
    {
        struct Emitter
        {   
            uint flags<name = "Flags?", comment = "Seems to be used to determine type of emitter, Model or Billboard">;
            uint64 flags2<name = "Flags">;
            byte blend<name = "Blend">;
            byte geoVertex<name = "Geometry Vtx">;
            byte insVtx<name = "Ins Vtx">;            
            byte metaballBlend<name = "Metaball Blend">;
            
            struct Light
            {
                float lightShine<name = "Light Shininess">;
                float lightIoe<name = "Light IOE">;
                float lightLambertOffs<name = "Light Lambert Offset">;
                float lightEmissive<name = "Light Emission">;
                float lightReflection<name = "Light Reflection">;
                float lightRefraction<name = "Light Refraction">;
            }lt<name = "Light">;
            
            vec3f aaBoxCenter<name = "AA Box Center">;
            vec3f aaBoxExtent<name = "AA Box Extent">;

            int geoVtxCount<name = "Geometry Vertex Count">;
            
            struct Blur
            {
                float blurVelocityScale<name = "Blur Velocity Scale">;
                float blurAlphaScale<name = "Blur Alpha Scale">;
                unsigned int blurNum<name = "Blur Count">;  
                float blurAlphaS<name = "Blur Alpha S">;
                float blurAlphaE<name = "Blur Alpha E">;
                float blurSec<name = "Blur Sec">;
            }blur<name = "Blur">;

            float shadowRate<name = "Shadow Rate">;
            
            struct Metaball
            {
                float metaballRate<name = "Metaball Rate">;
                rgba32 metaballColor<name = "Metaball Color">;
                float metaballNmlRange<name = "Metaball Normal Range">;
                float metaballNmlZ<name = "Metaball Normal Z">;
                float metaballLtShininess<name = "Metaball Light Shininess">;
                float metaballLtIoe<name = "Metaball Light IOE">;
                float metaballLtLambertOfs<name = "Metaball Light Lambert Offset">;          
                float metaballLtRatio<name = "Metaball Light Ratio">;
                float metaballLtEmissive<name = "Metaball Light Emission">;
                float metaballLtReflection<name = "Metaball Light Reflection">;
                float metaballLtRefraction<name = "Metaball Light Refraction">;
                float metaballHltBefore[2]<name = "Metaball H Light Before">;
                float metaballHltAfter[2]<name = "Metaball H Light After">;;
                float metaballHltPower<name = "Metaball H Light Power">;
                float metaballHltIntensity<name = "Metaball H Light Intensity">;
            }mtball<name = "Metaball">;

            float directivityH<name = "Directivity H">;
            float directivityV<name = "Directivity V">;
            float directivityPower<name = "Directivity Power">;
  
            unsigned int culling<name = "Culling">;
            float lightScale<name = "Light Scale">;
            float lightRatio<name = "Light Ratio">;
            float glare<name = "Glare">;

            float collisionRestitution<name = "Collision Restitution">;
            float collisionFriction<name = "Collision Friction">;
            float vecScale<name = "Vec Scale">;
            float normalScale<name = "Normal Scale">;

            struct Track
            {
                float trackFadeLength<name = "Track Fade Length">;
                unsigned int trackDivNum<name = "Track Div Num">;
                unsigned int trackPosNum<name = "Track Pos Num">;
                float trackFollowRate<name = "Track Follow Rate">;
                int trackUpdateLife<name = "Track Update Life">;
                float trackNoiseScale<name = "Track Noise Scale">;
                float trackNoiseVecScale<name = "Track Noise Vec Scale">;
                float trackNoiseUpSpeed<name = "Track Noise Up Speed">;
            }track<name = "Track">;

            float alphaGradation<name = "Alpha Gradation">;

            struct VF
            {
                unsigned int vfDivNum<name = "VF Div Num">;
                float vfVelocityScale<name = "VF Velocity Scale">;
                vec3f vfRangeSize<name = "VF Range Size">;
                vec3f vfRangeOffset<name = "VF Range Offset">;
                float vfLife<name = "VF Life">;
            }vf<name = "VF">;

            struct VAT  
            {
                double vatBboxLength<name = "VAT Bbox Length">;
                double vatBboxMin<name = "VAT Bbox Min">;
                double vatBbox1Length<name = "VAT BBox1 Length">;
                double vatBbox1Min<name = "VAT BBox1 Min">;
                unsigned int vatFrames<name = "VAT Frames">;
            }vat<name = "VAT">;

            int tickWait<name = "Tick Wait">;
            float lightUi1[4]<name = "Light UI 1">;

            byte unkReg1[40]<name = "Unknown Data">;

            struct UV
            {
                vec2f uvSize0<name = "UV Size 0">;
                vec2f uvSize1<name = "UV Size 1">;
                vec2f uvSize2<name = "UV Size 2">;
                vec2f uvSize3<name = "UV Size 3">;
                
                vec2f uvFlip0<name = "UV Flip 0">;
                vec2f uvFlip1<name = "UV Flip 1">;
                vec2f uvFlip2<name = "UV Flip 2">;
                vec2f uvFlip3<name = "UV Flip 3">;
            }uv<name = "UV">;

            byte unk3[224]<name = "Unknown">;
            int dataSize1<name = "Data Size 1">;
            
            //Just the header no image data
            struct DDSHeader
            {
                byte header[128]<name = "Header">;
            }ddshdr<name = "DDS Header", bgcolor = cRed>;


            float data1[(dataSize1 - 128) / 4]<name = "Data 1", bgcolor = cSilver>;
            int textureCount<name = "Texture Count", bgcolor = cGreen>;
            int unkTextureNumbers[textureCount];

            local byte emitterType = GetEmitterType(flags);


            local int texI = 0;

            for(texI = 0; texI < textureCount; texI++)
            {
                struct tex
                {
                    char name[32]<name = "TextureName">;
                }texy<name = name, bgcolor = cGreen>;
            }

            FSeek(FTell() + 4);
            int extraTexCount<bgcolor = cGreen>;
            local int l = 0;
            
            for(l = 0; l < extraTexCount; l++)
                struct extraTex
                {
                    char name[32]<name = "TextureName">;
                }texy<name = name, bgcolor = cGreen>;               

            int unkCount2<bgcolor = cDkGreen>;

            switch(blend)
            {
               default:
                     byte unkDat[44 * geoVtxCount]<name = "Unknown Data">;
                break;
            }


            if(emitterType == 0)
            {
                struct model
                {
                    local uint unkDat1Start = FTell();
                    local uint unkDat1Size = 160 * unkCount2;
                    byte unkDat1[unkDat1Size];
                   // int  unkDat2Size;
                   // int  unkDat2Size2;
                    
                    if(blend == 0)
                        byte unkyDat_v29[144];
                   
                }mdl<name = "Model", bgcolor = cDkGreen>;
            }
            else if(emitterType == 1)
            {

                struct billboard
                {
                    local uint unkDat1Start = FTell();
                    local uint unkDat1Size = 144 * unkCount2;
                    byte unkDat1[unkDat1Size];
                    local uint unkDat1End = FTell();

                    if(blend == 0)
                        byte unkyDat_v29[144];

                    local uint counter = 0;
                  
                }billb<name = "Billboard", bgcolor = cDkGreen>;
            }
            
                       
        }emitter<name = "Emitter", bgcolor = cAqua>;
    }


}pibInf<name = "PIB Information", bgcolor = cYellow>;


//0 = Model
//1 = Billboard
byte GetEmitterType(uint flag)
{
    local byte typeFlag = flag >> 6;

    if((typeFlag & 1) || (typeFlag & 0x40))
        return 1;

    return 0;
}

/*
struct UnkSection1
{
    ushort unk1<name = "Unknown">;
    ushort unk2<name = "Unknown">;

    int unk3<name = "Unknown">;
    int padding1<hidden = true>;

    byte unk4<name = "Unknown">;
   
    byte endian<name = "Endian">;
    byte padding2[2]<hidden = true>;
    
    int unk5[3]<hidden = true>;
    float unkfloatArr1[6]<name = "Unknown Float Array">;
    
    int cursedInt <name = "Cursed Number", comment = "Same from 19 (Y3) to 27 (YLAD) what does it do!?!">;
    int padding3[4]<hidden = true>;
}unkSec1<name = "Unknown Section 1", bgcolor = cAqua>;
*/